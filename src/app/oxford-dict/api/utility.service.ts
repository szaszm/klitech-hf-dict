/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Filters } from '../model/filters';
import { Languages } from '../model/languages';
import { Regions } from '../model/regions';
import { UtilityLabels } from '../model/utilityLabels';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UtilityService {

    protected basePath = 'https://od-api-demo.oxforddictionaries.com:443/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Lists available domains in a bilingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
     * @param sourceDomainsLanguage IANA language code
     * @param targetDomainsLanguage IANA language code
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public domainsSourceDomainsLanguageTargetDomainsLanguageGet(sourceDomainsLanguage: string, targetDomainsLanguage: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<UtilityLabels>;
    public domainsSourceDomainsLanguageTargetDomainsLanguageGet(sourceDomainsLanguage: string, targetDomainsLanguage: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UtilityLabels>>;
    public domainsSourceDomainsLanguageTargetDomainsLanguageGet(sourceDomainsLanguage: string, targetDomainsLanguage: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UtilityLabels>>;
    public domainsSourceDomainsLanguageTargetDomainsLanguageGet(sourceDomainsLanguage: string, targetDomainsLanguage: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceDomainsLanguage === null || sourceDomainsLanguage === undefined) {
            throw new Error('Required parameter sourceDomainsLanguage was null or undefined when calling domainsSourceDomainsLanguageTargetDomainsLanguageGet.');
        }
        if (targetDomainsLanguage === null || targetDomainsLanguage === undefined) {
            throw new Error('Required parameter targetDomainsLanguage was null or undefined when calling domainsSourceDomainsLanguageTargetDomainsLanguageGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling domainsSourceDomainsLanguageTargetDomainsLanguageGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling domainsSourceDomainsLanguageTargetDomainsLanguageGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<UtilityLabels>(`${this.basePath}/domains/${encodeURIComponent(String(sourceDomainsLanguage))}/${encodeURIComponent(String(targetDomainsLanguage))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists available domains in a monolingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public domainsSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<UtilityLabels>;
    public domainsSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UtilityLabels>>;
    public domainsSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UtilityLabels>>;
    public domainsSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLanguage === null || sourceLanguage === undefined) {
            throw new Error('Required parameter sourceLanguage was null or undefined when calling domainsSourceLanguageGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling domainsSourceLanguageGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling domainsSourceLanguageGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<UtilityLabels>(`${this.basePath}/domains/${encodeURIComponent(String(sourceLanguage))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists available filters for specific endpoint
     * Returns a list of all the valid filters for a given endpoint to construct API calls. 
     * @param endpoint Name of the endpoint.
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public filtersEndpointGet(endpoint: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<Filters>;
    public filtersEndpointGet(endpoint: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Filters>>;
    public filtersEndpointGet(endpoint: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Filters>>;
    public filtersEndpointGet(endpoint: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (endpoint === null || endpoint === undefined) {
            throw new Error('Required parameter endpoint was null or undefined when calling filtersEndpointGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling filtersEndpointGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling filtersEndpointGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Filters>(`${this.basePath}/filters/${encodeURIComponent(String(endpoint))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists available filters
     * Returns a list of all the valid filters to construct API calls. 
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public filtersGet(appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<Filters>;
    public filtersGet(appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Filters>>;
    public filtersGet(appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Filters>>;
    public filtersGet(appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling filtersGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling filtersGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Filters>(`${this.basePath}/filters`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists available grammatical features in a dataset
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given language dataset. 
     * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage.
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public grammaticalFeaturesSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<UtilityLabels>;
    public grammaticalFeaturesSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UtilityLabels>>;
    public grammaticalFeaturesSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UtilityLabels>>;
    public grammaticalFeaturesSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLanguage === null || sourceLanguage === undefined) {
            throw new Error('Required parameter sourceLanguage was null or undefined when calling grammaticalFeaturesSourceLanguageGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling grammaticalFeaturesSourceLanguageGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling grammaticalFeaturesSourceLanguageGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<UtilityLabels>(`${this.basePath}/grammaticalFeatures/${encodeURIComponent(String(sourceLanguage))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists available dictionaries
     * Returns a list of monolingual and bilingual language datasets available in the API 
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage.
     * @param targetLanguage IANA language code. If provided output will be filtered by sourceLanguage.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public languagesGet(appId: string, appKey: string, sourceLanguage?: string, targetLanguage?: string, observe?: 'body', reportProgress?: boolean): Observable<Languages>;
    public languagesGet(appId: string, appKey: string, sourceLanguage?: string, targetLanguage?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Languages>>;
    public languagesGet(appId: string, appKey: string, sourceLanguage?: string, targetLanguage?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Languages>>;
    public languagesGet(appId: string, appKey: string, sourceLanguage?: string, targetLanguage?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling languagesGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling languagesGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sourceLanguage !== undefined) {
            queryParameters = queryParameters.set('sourceLanguage', <any>sourceLanguage);
        }
        if (targetLanguage !== undefined) {
            queryParameters = queryParameters.set('targetLanguage', <any>targetLanguage);
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Languages>(`${this.basePath}/languages`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists available lexical categories in a dataset
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
     * @param language IANA language code
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public lexicalcategoriesLanguageGet(language: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<UtilityLabels>;
    public lexicalcategoriesLanguageGet(language: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UtilityLabels>>;
    public lexicalcategoriesLanguageGet(language: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UtilityLabels>>;
    public lexicalcategoriesLanguageGet(language: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (language === null || language === undefined) {
            throw new Error('Required parameter language was null or undefined when calling lexicalcategoriesLanguageGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling lexicalcategoriesLanguageGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling lexicalcategoriesLanguageGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<UtilityLabels>(`${this.basePath}/lexicalcategories/${encodeURIComponent(String(language))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists available regions in a monolingual dataset
     * Returns a list of the available [regions](documentation/glossary?term&#x3D;regions) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<Regions>;
    public regionsSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Regions>>;
    public regionsSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Regions>>;
    public regionsSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLanguage === null || sourceLanguage === undefined) {
            throw new Error('Required parameter sourceLanguage was null or undefined when calling regionsSourceLanguageGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling regionsSourceLanguageGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling regionsSourceLanguageGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Regions>(`${this.basePath}/regions/${encodeURIComponent(String(sourceLanguage))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists available registers in a  monolingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registersSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<UtilityLabels>;
    public registersSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UtilityLabels>>;
    public registersSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UtilityLabels>>;
    public registersSourceLanguageGet(sourceLanguage: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLanguage === null || sourceLanguage === undefined) {
            throw new Error('Required parameter sourceLanguage was null or undefined when calling registersSourceLanguageGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling registersSourceLanguageGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling registersSourceLanguageGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<UtilityLabels>(`${this.basePath}/registers/${encodeURIComponent(String(sourceLanguage))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists available registers in a bilingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
     * @param sourceRegisterLanguage IANA language code
     * @param targetRegisterLanguage IANA language code
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registersSourceRegisterLanguageTargetRegisterLanguageGet(sourceRegisterLanguage: string, targetRegisterLanguage: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<UtilityLabels>;
    public registersSourceRegisterLanguageTargetRegisterLanguageGet(sourceRegisterLanguage: string, targetRegisterLanguage: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UtilityLabels>>;
    public registersSourceRegisterLanguageTargetRegisterLanguageGet(sourceRegisterLanguage: string, targetRegisterLanguage: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UtilityLabels>>;
    public registersSourceRegisterLanguageTargetRegisterLanguageGet(sourceRegisterLanguage: string, targetRegisterLanguage: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceRegisterLanguage === null || sourceRegisterLanguage === undefined) {
            throw new Error('Required parameter sourceRegisterLanguage was null or undefined when calling registersSourceRegisterLanguageTargetRegisterLanguageGet.');
        }
        if (targetRegisterLanguage === null || targetRegisterLanguage === undefined) {
            throw new Error('Required parameter targetRegisterLanguage was null or undefined when calling registersSourceRegisterLanguageTargetRegisterLanguageGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling registersSourceRegisterLanguageTargetRegisterLanguageGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling registersSourceRegisterLanguageTargetRegisterLanguageGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<UtilityLabels>(`${this.basePath}/registers/${encodeURIComponent(String(sourceRegisterLanguage))}/${encodeURIComponent(String(targetRegisterLanguage))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
