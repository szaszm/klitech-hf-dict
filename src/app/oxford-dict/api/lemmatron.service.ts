/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Lemmatron } from '../model/lemmatron';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LemmatronService {

    protected basePath = 'https://od-api-demo.oxforddictionaries.com:443/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Apply optional filters to Lemmatron response
     *  Retrieve available [lemmas](documentation/glossary?term&#x3D;lemma) for a given [inflected](documentation/glossary?term&#x3D;inflection) wordform. Filter results by categories.      &lt;div id&#x3D;\&quot;lemmatron_filters\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code
     * @param wordId The input word
     * @param filters Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma.
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inflectionsSourceLangWordIdFiltersGet(sourceLang: string, wordId: string, filters: Array<string>, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<Lemmatron>;
    public inflectionsSourceLangWordIdFiltersGet(sourceLang: string, wordId: string, filters: Array<string>, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Lemmatron>>;
    public inflectionsSourceLangWordIdFiltersGet(sourceLang: string, wordId: string, filters: Array<string>, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Lemmatron>>;
    public inflectionsSourceLangWordIdFiltersGet(sourceLang: string, wordId: string, filters: Array<string>, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLang === null || sourceLang === undefined) {
            throw new Error('Required parameter sourceLang was null or undefined when calling inflectionsSourceLangWordIdFiltersGet.');
        }
        if (wordId === null || wordId === undefined) {
            throw new Error('Required parameter wordId was null or undefined when calling inflectionsSourceLangWordIdFiltersGet.');
        }
        if (filters === null || filters === undefined) {
            throw new Error('Required parameter filters was null or undefined when calling inflectionsSourceLangWordIdFiltersGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling inflectionsSourceLangWordIdFiltersGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling inflectionsSourceLangWordIdFiltersGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Lemmatron>(`${this.basePath}/inflections/${encodeURIComponent(String(sourceLang))}/${encodeURIComponent(String(wordId))}/${encodeURIComponent(String(filters))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Check a word exists in the dictionary and retrieve its root form
     *  Use this to check if a word exists in the dictionary, or what &#39;root&#39; form it links to (e.g., swimming &gt; swim). The response tells you the possible [lemmas](documentation/glossary?term&#x3D;lemma) for a given [inflected](documentation/glossary?term&#x3D;inflection) word. This can then be combined with other endpoints to retrieve more information.    &lt;div id&#x3D;\&quot;lemmatron\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code
     * @param wordId The input word
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inflectionsSourceLangWordIdGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<Lemmatron>;
    public inflectionsSourceLangWordIdGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Lemmatron>>;
    public inflectionsSourceLangWordIdGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Lemmatron>>;
    public inflectionsSourceLangWordIdGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLang === null || sourceLang === undefined) {
            throw new Error('Required parameter sourceLang was null or undefined when calling inflectionsSourceLangWordIdGet.');
        }
        if (wordId === null || wordId === undefined) {
            throw new Error('Required parameter wordId was null or undefined when calling inflectionsSourceLangWordIdGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling inflectionsSourceLangWordIdGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling inflectionsSourceLangWordIdGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Lemmatron>(`${this.basePath}/inflections/${encodeURIComponent(String(sourceLang))}/${encodeURIComponent(String(wordId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
