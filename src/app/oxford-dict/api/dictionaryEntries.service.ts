/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { RetrieveEntry } from '../model/retrieveEntry';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DictionaryEntriesService {

    protected basePath = 'https://od-api-demo.oxforddictionaries.com:443/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Apply filters to response
     *  Use filters to limit the [entry](documentation/glossary?term&#x3D;entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term&#x3D;pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using &#39;&#x3D;&#39;. For example &#39;grammaticalFeatures&#x3D;singular&#39;. Filters can also be combined using a semicolon.    &lt;div id&#x3D;\&quot;dictionary_entries_filters\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code
     * @param wordId An Entry identifier. Case-sensitive.
     * @param filters Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma.
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public entriesSourceLangWordIdFiltersGet(sourceLang: string, wordId: string, filters: Array<string>, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<RetrieveEntry>;
    public entriesSourceLangWordIdFiltersGet(sourceLang: string, wordId: string, filters: Array<string>, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RetrieveEntry>>;
    public entriesSourceLangWordIdFiltersGet(sourceLang: string, wordId: string, filters: Array<string>, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RetrieveEntry>>;
    public entriesSourceLangWordIdFiltersGet(sourceLang: string, wordId: string, filters: Array<string>, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLang === null || sourceLang === undefined) {
            throw new Error('Required parameter sourceLang was null or undefined when calling entriesSourceLangWordIdFiltersGet.');
        }
        if (wordId === null || wordId === undefined) {
            throw new Error('Required parameter wordId was null or undefined when calling entriesSourceLangWordIdFiltersGet.');
        }
        if (filters === null || filters === undefined) {
            throw new Error('Required parameter filters was null or undefined when calling entriesSourceLangWordIdFiltersGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling entriesSourceLangWordIdFiltersGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling entriesSourceLangWordIdFiltersGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<RetrieveEntry>(`${this.basePath}/entries/${encodeURIComponent(String(sourceLang))}/${encodeURIComponent(String(wordId))}/${encodeURIComponent(String(filters))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve dictionary information for a given word
     *  Use this to retrieve definitions, [pronunciations](documentation/glossary?term&#x3D;pronunciation), example sentences, [grammatical information](documentation/glossary?term&#x3D;grammaticalfeatures) and [word origins](documentation/glossary?term&#x3D;etymology). It only works for dictionary [headwords](documentation/glossary?term&#x3D;headword), so you may need to use the [Lemmatron](documentation/glossary?term&#x3D;lemma) first if your input is likely to be an [inflected](documentation/glossary?term&#x3D;inflection) form (e.g., &#39;swimming&#39;). This would return the linked [headword](documentation/glossary?term&#x3D;headword) (e.g., &#39;swim&#39;) which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    &lt;div id&#x3D;\&quot;dictionary_entries\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code
     * @param wordId An Entry identifier. Case-sensitive.
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public entriesSourceLangWordIdGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<RetrieveEntry>;
    public entriesSourceLangWordIdGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RetrieveEntry>>;
    public entriesSourceLangWordIdGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RetrieveEntry>>;
    public entriesSourceLangWordIdGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLang === null || sourceLang === undefined) {
            throw new Error('Required parameter sourceLang was null or undefined when calling entriesSourceLangWordIdGet.');
        }
        if (wordId === null || wordId === undefined) {
            throw new Error('Required parameter wordId was null or undefined when calling entriesSourceLangWordIdGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling entriesSourceLangWordIdGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling entriesSourceLangWordIdGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<RetrieveEntry>(`${this.basePath}/entries/${encodeURIComponent(String(sourceLang))}/${encodeURIComponent(String(wordId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Specify GB or US dictionary for English entry search
     *  USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US). 
     * @param sourceLang IANA language code
     * @param wordId An Entry identifier. Case-sensitive.
     * @param region Region filter parameter. gb &#x3D; Oxford Dictionary of English. us &#x3D; New Oxford American Dictionary.
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public entriesSourceLangWordIdRegionsregionGet(sourceLang: string, wordId: string, region: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<RetrieveEntry>;
    public entriesSourceLangWordIdRegionsregionGet(sourceLang: string, wordId: string, region: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RetrieveEntry>>;
    public entriesSourceLangWordIdRegionsregionGet(sourceLang: string, wordId: string, region: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RetrieveEntry>>;
    public entriesSourceLangWordIdRegionsregionGet(sourceLang: string, wordId: string, region: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLang === null || sourceLang === undefined) {
            throw new Error('Required parameter sourceLang was null or undefined when calling entriesSourceLangWordIdRegionsregionGet.');
        }
        if (wordId === null || wordId === undefined) {
            throw new Error('Required parameter wordId was null or undefined when calling entriesSourceLangWordIdRegionsregionGet.');
        }
        if (region === null || region === undefined) {
            throw new Error('Required parameter region was null or undefined when calling entriesSourceLangWordIdRegionsregionGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling entriesSourceLangWordIdRegionsregionGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling entriesSourceLangWordIdRegionsregionGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<RetrieveEntry>(`${this.basePath}/entries/${encodeURIComponent(String(sourceLang))}/${encodeURIComponent(String(wordId))}/regions=${encodeURIComponent(String(region))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
