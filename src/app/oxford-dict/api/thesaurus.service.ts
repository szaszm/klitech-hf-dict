/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Thesaurus } from '../model/thesaurus';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ThesaurusService {

    protected basePath = 'https://od-api-demo.oxforddictionaries.com:443/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Retrieve words that mean the opposite
     *  Retrieve words that are opposite in meaning to the input word ([antonym](documentation/glossary?term&#x3D;thesaurus)).    &lt;div id&#x3D;\&quot;antonyms\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code
     * @param wordId An Entry identifier. Case-sensitive.
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public entriesSourceLangWordIdAntonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<Thesaurus>;
    public entriesSourceLangWordIdAntonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Thesaurus>>;
    public entriesSourceLangWordIdAntonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Thesaurus>>;
    public entriesSourceLangWordIdAntonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLang === null || sourceLang === undefined) {
            throw new Error('Required parameter sourceLang was null or undefined when calling entriesSourceLangWordIdAntonymsGet.');
        }
        if (wordId === null || wordId === undefined) {
            throw new Error('Required parameter wordId was null or undefined when calling entriesSourceLangWordIdAntonymsGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling entriesSourceLangWordIdAntonymsGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling entriesSourceLangWordIdAntonymsGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Thesaurus>(`${this.basePath}/entries/${encodeURIComponent(String(sourceLang))}/${encodeURIComponent(String(wordId))}/antonyms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve words that are similar
     *  Use this to retrieve words that are similar in meaning to the input word ([synonym](documentation/glossary?term&#x3D;synonym)).    &lt;div id&#x3D;\&quot;synonyms\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code
     * @param wordId An Entry identifier. Case-sensitive.
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public entriesSourceLangWordIdSynonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<Thesaurus>;
    public entriesSourceLangWordIdSynonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Thesaurus>>;
    public entriesSourceLangWordIdSynonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Thesaurus>>;
    public entriesSourceLangWordIdSynonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLang === null || sourceLang === undefined) {
            throw new Error('Required parameter sourceLang was null or undefined when calling entriesSourceLangWordIdSynonymsGet.');
        }
        if (wordId === null || wordId === undefined) {
            throw new Error('Required parameter wordId was null or undefined when calling entriesSourceLangWordIdSynonymsGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling entriesSourceLangWordIdSynonymsGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling entriesSourceLangWordIdSynonymsGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Thesaurus>(`${this.basePath}/entries/${encodeURIComponent(String(sourceLang))}/${encodeURIComponent(String(wordId))}/synonyms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve synonyms and antonyms for a given word
     *  Retrieve available [synonyms](documentation/glossary?term&#x3D;thesaurus) and [antonyms](documentation/glossary?term&#x3D;thesaurus) for a given word and language.     &lt;div id&#x3D;\&quot;synonyms_and_antonyms\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code
     * @param wordId An Entry identifier. Case-sensitive.
     * @param appId App ID Authentication Parameter
     * @param appKey App Key Authentication Parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public entriesSourceLangWordIdSynonymsantonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'body', reportProgress?: boolean): Observable<Thesaurus>;
    public entriesSourceLangWordIdSynonymsantonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Thesaurus>>;
    public entriesSourceLangWordIdSynonymsantonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Thesaurus>>;
    public entriesSourceLangWordIdSynonymsantonymsGet(sourceLang: string, wordId: string, appId: string, appKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sourceLang === null || sourceLang === undefined) {
            throw new Error('Required parameter sourceLang was null or undefined when calling entriesSourceLangWordIdSynonymsantonymsGet.');
        }
        if (wordId === null || wordId === undefined) {
            throw new Error('Required parameter wordId was null or undefined when calling entriesSourceLangWordIdSynonymsantonymsGet.');
        }
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling entriesSourceLangWordIdSynonymsantonymsGet.');
        }
        if (appKey === null || appKey === undefined) {
            throw new Error('Required parameter appKey was null or undefined when calling entriesSourceLangWordIdSynonymsantonymsGet.');
        }

        let headers = this.defaultHeaders;
        if (appId !== undefined && appId !== null) {
            headers = headers.set('app_id', String(appId));
        }
        if (appKey !== undefined && appKey !== null) {
            headers = headers.set('app_key', String(appKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Thesaurus>(`${this.basePath}/entries/${encodeURIComponent(String(sourceLang))}/${encodeURIComponent(String(wordId))}/synonyms;antonyms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
